
package com.company.productapp.ui;

import java.util.Arrays;
import java.util.Collection;
import java.util.Optional;

import com.company.productapp.dal.ProductDAO;
import com.company.productapp.domain.Product;
import com.company.productapp.domain.ProductCategory;
import com.company.productapp.microstream.MicroStream;
import com.rapidclipse.framework.server.resources.CaptionUtils;
import com.rapidclipse.framework.server.ui.filter.FilterComponent;
import com.rapidclipse.framework.server.ui.filter.GridFilterSubjectFactory;
import com.rapidclipse.framework.server.ui.persistence.PersistFlag;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.dialog.Dialog;
import com.vaadin.flow.component.grid.Grid;
import com.vaadin.flow.component.html.Div;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.router.Route;


@Route("")
public class ViewMain extends VerticalLayout
{

	/**
	 *
	 */

	public ViewMain()
	{

		super();
		this.initUI();

		MicroStream.storageManager.store(MicroStream.root.getProducts().addAll(ViewMain.createProducts()));

		this.grid.setItems(ProductDAO.findAll());

		this.grid.addComponentColumn(product -> {
			final Button editButton = new Button("Edit");
			editButton.addClickListener(e -> {
				final Dialog dialog = new Dialog();
				dialog.add(new PopupViewProduct());
				if(!dialog.isOpened())
				{
					dialog.open();
				}
				this.grid.getEditor()
					.editItem(product);
			});
			return editButton;
		});
		
		this.grid.addComponentColumn(item -> new Button("LÃ¶schen", click -> {
			ProductDAO.delete(item);
			this.grid.getDataProvider().refreshAll();
		}));

		// final List<Product> products = new ArrayList<>();
		// products.add(new Product("test", "test", "test", 12, 1, 0));
		// this.grid.setItems(products);
	}

	private static Collection<Product> createProducts()
	{
		return Arrays.asList(
			new Product("Test1", "Test1", null, 1, 1, 1),
			new Product("Test2", "Test2", null, 2, 2, 2),
			new Product("Test3", "Test3", null, 3, 3, 3));
	}

	/* WARNING: Do NOT edit!<br>The content of this method is always regenerated by the UI designer. */
	// <generated-code name="initUI">
	private void initUI()
	{
		this.divHeader        = new Div();
		this.horizontalLayout = new HorizontalLayout();
		this.filterComponent  = new FilterComponent();
		this.buttonAdd        = new Button();
		this.divBody          = new Div();
		this.grid             = new Grid<>(Product.class, false);

		this.filterComponent.setId("filterComponent");
		PersistFlag.set(this.filterComponent, true);
		this.buttonAdd.setText("Add new Product");
		this.grid.setId("grid");
		PersistFlag.set(this.grid, true);
		this.grid.addColumn(Product::getImageUrl).setKey("imageUrl")
			.setHeader(CaptionUtils.resolveCaption(Product.class, "imageUrl")).setSortable(true);
		this.grid.addColumn(Product::getUuid).setKey("uuid")
			.setHeader(CaptionUtils.resolveCaption(Product.class, "uuid"))
			.setSortable(true);
		this.grid.addColumn(Product::getName).setKey("name")
			.setHeader(CaptionUtils.resolveCaption(Product.class, "name"))
			.setSortable(true);
		this.grid.addColumn(Product::getDescription).setKey("description")
			.setHeader(CaptionUtils.resolveCaption(Product.class, "description")).setSortable(true);
		this.grid
			.addColumn(v -> Optional.ofNullable(v).map(Product::getCategory).map(ProductCategory::getName).orElse(null))
			.setKey("category.name").setHeader(CaptionUtils.resolveCaption(Product.class, "category.name"))
			.setSortable(true);
		this.grid.addColumn(Product::getUnitPrice).setKey("unitPrice")
			.setHeader(CaptionUtils.resolveCaption(Product.class, "unitPrice")).setSortable(true);
		this.grid.addColumn(Product::getUnitWeight).setKey("unitWeight")
			.setHeader(CaptionUtils.resolveCaption(Product.class, "unitWeight")).setSortable(true);
		this.grid.addColumn(Product::getUnitsInStock).setKey("unitsInStock")
			.setHeader(CaptionUtils.resolveCaption(Product.class, "unitsInStock")).setSortable(true);
		this.grid.setSelectionMode(Grid.SelectionMode.SINGLE);

		this.filterComponent.connectWith(this.grid.getDataProvider());
		this.filterComponent.setFilterSubject(GridFilterSubjectFactory.CreateFilterSubject(this.grid,
			Arrays.asList("category", "description", "name", "uuid"),
			Arrays.asList("category", "description", "name", "unitPrice", "unitWeight", "unitsInStock", "uuid")));

		this.filterComponent.setSizeUndefined();
		this.buttonAdd.setSizeUndefined();
		this.horizontalLayout.add(this.filterComponent, this.buttonAdd);
		this.horizontalLayout.setFlexGrow(1.0, this.filterComponent);
		this.horizontalLayout.setSizeUndefined();
		this.divHeader.add(this.horizontalLayout);
		this.grid.setSizeFull();
		this.divBody.add(this.grid);
		this.divHeader.setSizeUndefined();
		this.divBody.setSizeFull();
		this.add(this.divHeader, this.divBody);
		this.setSizeFull();
	} // </generated-code>

	// <generated-code name="variables">
	private Button           buttonAdd;
	private HorizontalLayout horizontalLayout;
	private Div              divHeader, divBody;
	private FilterComponent  filterComponent;
	private Grid<Product>    grid;
	// </generated-code>

}
